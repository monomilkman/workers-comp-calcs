import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';
import { Document, Packer, Paragraph, TextRun, Table, TableCell, TableRow, WidthType, AlignmentType } from 'docx';
import type { LedgerEntry, DemandCalculation, AppState } from '../types';
import { formatCurrency } from './money';
import { loadImageAsBase64, getLogoDisplayDimensions } from './logoUtils';

interface SettlementStatementData {
  proposedAmount: number;
  liabilityType: 'accepted' | 'unaccepted';
  standardFee: number;
  actualFee: number;
  feeReduction: number;
  expenses: number;
  deductions: Array<{ description: string; amount: number }>;
  totalDeductions: number;
  netToEmployee: number;
}

/**
 * Export ledger data to CSV format
 */
export function exportLedgerToCSV(ledger: LedgerEntry[]): string {
  const headers = [
    'ID',
    'Type',
    'Start Date',
    'End Date',
    'AWW Used',
    'EC Used',
    'Weeks',
    'Raw Weekly',
    'Final Weekly',
    'Dollars Paid',
    'Notes'
  ];
  
  const csvRows = [headers.join(',')];
  
  ledger.forEach(entry => {
    const row = [
      `"${entry.id}"`,
      `"${entry.type}"`,
      `"${entry.start}"`,
      `"${entry.end || 'Present'}"`,
      entry.aww_used ? entry.aww_used.toString() : '',
      entry.ec_used ? entry.ec_used.toString() : '',
      entry.weeks.toString(),
      entry.raw_weekly.toString(),
      entry.final_weekly.toString(),
      entry.dollars_paid.toString(),
      `"${entry.notes || ''}"`
    ];
    csvRows.push(row.join(','));
  });
  
  return csvRows.join('\n');
}

/**
 * Export complete session data to JSON
 */
export function exportSessionToJSON(data: AppState, metadata: { name: string; description?: string }): string {
  const sessionData = {
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    data,
    metadata
  };
  
  return JSON.stringify(sessionData, null, 2);
}

/**
 * Generate PDF demand summary
 */
export function generateDemandPDF(
  demand: DemandCalculation,
  appState: AppState,
  clientInfo?: { name?: string; caseNumber?: string }
): string {
  const doc = new jsPDF();
  let yPosition = 20;
  
  // Header
  doc.setFontSize(18);
  doc.text('Massachusetts Workers\' Compensation Demand Calculation', 20, yPosition);
  yPosition += 10;
  
  // Client info if provided
  if (clientInfo?.name || clientInfo?.caseNumber) {
    doc.setFontSize(12);
    if (clientInfo.name) {
      doc.text(`Client: ${clientInfo.name}`, 20, yPosition);
      yPosition += 7;
    }
    if (clientInfo.caseNumber) {
      doc.text(`Case: ${clientInfo.caseNumber}`, 20, yPosition);
      yPosition += 7;
    }
    yPosition += 5;
  }
  
  // Basic information
  doc.setFontSize(12);
  doc.text(`Average Weekly Wage: ${formatCurrency(appState.aww)}`, 20, yPosition);
  yPosition += 7;
  doc.text(`Date of Injury: ${appState.date_of_injury}`, 20, yPosition);
  yPosition += 7;
  doc.text(`Earning Capacity: ${formatCurrency(appState.earning_capacity_default)}`, 20, yPosition);
  yPosition += 15;
  
  // Demand breakdown
  doc.setFontSize(14);
  doc.text('Demand Breakdown:', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  demand.breakdowns.forEach(breakdown => {
    const benefitName = getBenefitDisplayName(breakdown.type);
    doc.text(`${benefitName}:`, 20, yPosition);
    yPosition += 6;
    doc.text(`  ${breakdown.requestedYears} years (${breakdown.requestedWeeks} weeks) × ${formatCurrency(breakdown.weeklyRate)}/week`, 25, yPosition);
    yPosition += 6;
    doc.text(`  Total: ${formatCurrency(breakdown.totalAmount)}`, 25, yPosition);
    yPosition += 8;
    
    if (breakdown.exceedsStatutory || breakdown.exceedsRemaining) {
      doc.setTextColor(255, 0, 0); // Red for warnings
      if (breakdown.exceedsStatutory) {
        doc.text(`  ⚠ Exceeds statutory maximum`, 25, yPosition);
        yPosition += 6;
      }
      if (breakdown.exceedsRemaining) {
        doc.text(`  ⚠ Exceeds remaining entitlement`, 25, yPosition);
        yPosition += 6;
      }
      doc.setTextColor(0, 0, 0); // Back to black
      yPosition += 3;
    }
  });
  
  // Totals
  yPosition += 5;
  doc.text(`Subtotal: ${formatCurrency(demand.subtotal)}`, 20, yPosition);
  yPosition += 7;
  
  if (demand.section36Amount > 0) {
    doc.text(`Section 36 (Scarring/Disfigurement): ${formatCurrency(demand.section36Amount)}`, 20, yPosition);
    yPosition += 7;
  }
  
  if (demand.section28Applied) {
    doc.text(`Section 28 Penalty Applied (${demand.section28Multiplier}x multiplier)`, 20, yPosition);
    yPosition += 7;
  }
  
  doc.setFontSize(14);
  doc.text(`TOTAL DEMAND: ${formatCurrency(demand.grandTotal)}`, 20, yPosition);
  
  // Footer
  yPosition = 280;
  doc.setFontSize(8);
  doc.text(`Generated by MA WC Benefits Calculator - ${new Date().toLocaleDateString()}`, 20, yPosition);
  
  return doc.output('datauristring');
}

/**
 * Create downloadable blob from string content
 */
export function createDownloadBlob(content: string, mimeType: string): Blob {
  return new Blob([content], { type: mimeType });
}

/**
 * Trigger download of a blob with specified filename
 */
export function downloadBlob(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Generate settlement statement PDF
 */
export async function generateSettlementStatementPDF(
  settlementData: SettlementStatementData,
  clientInfo?: { name?: string; attorney?: string; dateOfInjury?: string; date?: string }
): Promise<string> {
  const doc = new jsPDF();
  let yPosition = 20;
  
  // Add logo if available
  try {
    const logoBase64 = await loadImageAsBase64('/JGIL Logo.jpg');
    const logoDimensions = getLogoDisplayDimensions();
    doc.addImage(logoBase64, 'JPEG', 20, yPosition - 5, logoDimensions.width, logoDimensions.height);
  } catch (error) {
    console.warn('Could not load logo for PDF:', error);
  }
  
  // Header
  doc.setFontSize(18);
  doc.text('Settlement Distribution Statement', 20, yPosition);
  yPosition += 15;
  
  // Client and attorney info (positioned to the right to make room for logo)
  doc.setFontSize(12);
  const infoStartX = 110; // Position info to the right of where logo will be
  
  if (clientInfo?.attorney) {
    doc.text(`Attorney: ${clientInfo.attorney}`, infoStartX, yPosition);
    yPosition += 7;
  }
  if (clientInfo?.name) {
    doc.text(`Client: ${clientInfo.name}`, infoStartX, yPosition);
    yPosition += 7;
  }
  if (clientInfo?.dateOfInjury) {
    doc.text(`Date of Injury: ${clientInfo.dateOfInjury}`, infoStartX, yPosition);
    yPosition += 7;
  }
  
  const displayDate = clientInfo?.date ? new Date(clientInfo.date).toLocaleDateString() : new Date().toLocaleDateString();
  doc.text(`Date: ${displayDate}`, infoStartX, yPosition);
  yPosition += 15;
  
  // Settlement amount
  doc.setFontSize(14);
  doc.text('SETTLEMENT BREAKDOWN', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(12);
  doc.text(`Gross Settlement Amount:`, 20, yPosition);
  doc.text(`${formatCurrency(settlementData.proposedAmount)}`, 150, yPosition);
  yPosition += 10;
  
  // Attorney fees section
  doc.text('ATTORNEY FEES & EXPENSES', 20, yPosition);
  yPosition += 8;
  
  doc.setFontSize(11);
  const liabilityText = settlementData.liabilityType === 'accepted' ? 'Accepted Liability (20%)' : 'Unaccepted Liability (15%)';
  doc.text(`Standard Fee - ${liabilityText}:`, 25, yPosition);
  doc.text(`${formatCurrency(settlementData.standardFee)}`, 150, yPosition);
  yPosition += 6;
  
  if (settlementData.feeReduction > 0) {
    doc.text(`Less: Attorney Fee Reduction:`, 25, yPosition);
    doc.text(`(${formatCurrency(settlementData.feeReduction)})`, 150, yPosition);
    yPosition += 6;
  }
  
  doc.text(`Actual Attorney Fee:`, 25, yPosition);
  doc.text(`${formatCurrency(settlementData.actualFee)}`, 150, yPosition);
  yPosition += 6;
  
  if (settlementData.expenses > 0) {
    doc.text(`Attorney Expenses:`, 25, yPosition);
    doc.text(`${formatCurrency(settlementData.expenses)}`, 150, yPosition);
    yPosition += 6;
  }
  
  const totalAttorneyDeductions = settlementData.actualFee + settlementData.expenses;
  doc.text(`Total Attorney Deductions:`, 25, yPosition);
  doc.text(`${formatCurrency(totalAttorneyDeductions)}`, 150, yPosition);
  yPosition += 10;
  
  // Other deductions
  if (settlementData.deductions.length > 0) {
    doc.setFontSize(12);
    doc.text('OTHER DEDUCTIONS', 20, yPosition);
    yPosition += 8;
    
    doc.setFontSize(11);
    settlementData.deductions.forEach(deduction => {
      if (deduction.amount > 0) {
        doc.text(`${deduction.description}:`, 25, yPosition);
        doc.text(`${formatCurrency(deduction.amount)}`, 150, yPosition);
        yPosition += 6;
      }
    });
    
    if (settlementData.totalDeductions > 0) {
      doc.text(`Total Other Deductions:`, 25, yPosition);
      doc.text(`${formatCurrency(settlementData.totalDeductions)}`, 150, yPosition);
      yPosition += 10;
    }
  }
  
  // Net calculation
  doc.setFontSize(14);
  doc.setDrawColor(0);
  doc.line(20, yPosition, 190, yPosition); // Horizontal line
  yPosition += 8;
  
  doc.text('NET AMOUNT TO CLIENT:', 20, yPosition);
  doc.text(`${formatCurrency(settlementData.netToEmployee)}`, 140, yPosition);
  yPosition += 5;
  
  doc.line(20, yPosition, 190, yPosition); // Bottom line
  yPosition += 15;
  
  // Footer notes
  doc.setFontSize(10);
  doc.text('This statement reflects the distribution of settlement funds as calculated.', 20, yPosition);
  yPosition += 5;
  doc.text('Please review carefully and contact your attorney with any questions.', 20, yPosition);
  
  // Bottom footer
  yPosition = 280;
  doc.setFontSize(8);
  doc.text(`Generated by MA WC Benefits Calculator - ${new Date().toLocaleDateString()}`, 20, yPosition);
  
  return doc.output('datauristring');
}

/**
 * Generate settlement statement as Excel file
 */
export function generateSettlementStatementExcel(
  settlementData: SettlementStatementData,
  clientInfo?: { name?: string; attorney?: string; dateOfInjury?: string; date?: string }
): Blob {
  const wb = XLSX.utils.book_new();
  
  // Create settlement distribution data
  const wsData = [
    ['Settlement Distribution Statement'],
    [''],
    ['Attorney:', clientInfo?.attorney || ''],
    ['Client:', clientInfo?.name || ''],
    ['Date of Injury:', clientInfo?.dateOfInjury || ''],
    ['Date:', clientInfo?.date || new Date().toLocaleDateString()],
    [''],
    ['SETTLEMENT BREAKDOWN'],
    ['Gross Settlement Amount:', formatCurrency(settlementData.proposedAmount)],
    [''],
    ['ATTORNEY FEES & EXPENSES'],
    [`Standard Fee - ${settlementData.liabilityType === 'accepted' ? 'Accepted Liability (20%)' : 'Unaccepted Liability (15%)'}:`, formatCurrency(settlementData.standardFee)],
  ];

  if (settlementData.feeReduction > 0) {
    wsData.push(['Less: Attorney Fee Reduction:', `(${formatCurrency(settlementData.feeReduction)})`]);
  }

  wsData.push(
    ['Actual Attorney Fee:', formatCurrency(settlementData.actualFee)],
  );

  if (settlementData.expenses > 0) {
    wsData.push(['Attorney Expenses:', formatCurrency(settlementData.expenses)]);
  }

  wsData.push(
    ['Total Attorney Deductions:', formatCurrency(settlementData.actualFee + settlementData.expenses)],
    ['']
  );

  // Add other deductions
  if (settlementData.deductions.length > 0) {
    wsData.push(['OTHER DEDUCTIONS']);
    settlementData.deductions.forEach(deduction => {
      if (deduction.amount > 0) {
        wsData.push([deduction.description, formatCurrency(deduction.amount)]);
      }
    });
    if (settlementData.totalDeductions > 0) {
      wsData.push(['Total Other Deductions:', formatCurrency(settlementData.totalDeductions)]);
    }
    wsData.push(['']);
  }

  wsData.push(
    ['NET AMOUNT TO CLIENT:', formatCurrency(settlementData.netToEmployee)],
    [''],
    ['This statement reflects the distribution of settlement funds as calculated.'],
    ['Please review carefully and contact your attorney with any questions.']
  );

  const ws = XLSX.utils.aoa_to_sheet(wsData);
  
  // Style the header
  if (ws['A1']) ws['A1'].s = { font: { bold: true, size: 16 } };
  if (ws['A8']) ws['A8'].s = { font: { bold: true } };
  if (ws['A11']) ws['A11'].s = { font: { bold: true } };
  if (ws[`A${wsData.length - 5}`]) ws[`A${wsData.length - 5}`].s = { font: { bold: true, size: 14 } };
  
  XLSX.utils.book_append_sheet(wb, ws, 'Settlement Distribution');
  
  const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  return new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
}

/**
 * Generate settlement statement as Word document
 */
export async function generateSettlementStatementWord(
  settlementData: SettlementStatementData,
  clientInfo?: { name?: string; attorney?: string; dateOfInjury?: string; date?: string }
): Promise<Blob> {
  const children: any[] = [
    new Paragraph({
      children: [new TextRun({ text: 'Settlement Distribution Statement', bold: true, size: 32 })],
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 }
    })
  ];

  // Note: Logo integration for Word documents requires server-side processing
  // For now, we'll skip logo in Word documents to avoid compilation issues

  // Client info
  const infoRows = [
    [`Attorney: ${clientInfo?.attorney || ''}`],
    [`Client: ${clientInfo?.name || ''}`],
    [`Date of Injury: ${clientInfo?.dateOfInjury || ''}`],
    [`Date: ${clientInfo?.date || new Date().toLocaleDateString()}`]
  ];

  children.push(
    ...infoRows.map(row => new Paragraph({
      children: [new TextRun({ text: row[0] })],
      spacing: { after: 100 }
    })),
    new Paragraph({
      children: [new TextRun({ text: 'SETTLEMENT BREAKDOWN', bold: true })],
      spacing: { before: 200, after: 200 }
    })
  );

  // Settlement breakdown table
  const tableRows = [
    new TableRow({
      children: [
        new TableCell({ children: [new Paragraph('Gross Settlement Amount:')] }),
        new TableCell({ children: [new Paragraph(formatCurrency(settlementData.proposedAmount))] })
      ]
    }),
    new TableRow({
      children: [
        new TableCell({ children: [new Paragraph('ATTORNEY FEES & EXPENSES')] }),
        new TableCell({ children: [new Paragraph('')] })
      ]
    }),
    new TableRow({
      children: [
        new TableCell({ children: [new Paragraph(`Standard Fee - ${settlementData.liabilityType === 'accepted' ? 'Accepted Liability (20%)' : 'Unaccepted Liability (15%)'}:`)] }),
        new TableCell({ children: [new Paragraph(formatCurrency(settlementData.standardFee))] })
      ]
    })
  ];

  if (settlementData.feeReduction > 0) {
    tableRows.push(
      new TableRow({
        children: [
          new TableCell({ children: [new Paragraph('Less: Attorney Fee Reduction:')] }),
          new TableCell({ children: [new Paragraph(`(${formatCurrency(settlementData.feeReduction)})`)] })
        ]
      })
    );
  }

  tableRows.push(
    new TableRow({
      children: [
        new TableCell({ children: [new Paragraph('Actual Attorney Fee:')] }),
        new TableCell({ children: [new Paragraph(formatCurrency(settlementData.actualFee))] })
      ]
    })
  );

  if (settlementData.expenses > 0) {
    tableRows.push(
      new TableRow({
        children: [
          new TableCell({ children: [new Paragraph('Attorney Expenses:')] }),
          new TableCell({ children: [new Paragraph(formatCurrency(settlementData.expenses))] })
        ]
      })
    );
  }

  // Add other deductions
  if (settlementData.deductions.length > 0) {
    tableRows.push(
      new TableRow({
        children: [
          new TableCell({ children: [new Paragraph('OTHER DEDUCTIONS')] }),
          new TableCell({ children: [new Paragraph('')] })
        ]
      })
    );

    settlementData.deductions.forEach(deduction => {
      if (deduction.amount > 0) {
        tableRows.push(
          new TableRow({
            children: [
              new TableCell({ children: [new Paragraph(deduction.description)] }),
              new TableCell({ children: [new Paragraph(formatCurrency(deduction.amount))] })
            ]
          })
        );
      }
    });
  }

  tableRows.push(
    new TableRow({
      children: [
        new TableCell({ 
          children: [new Paragraph({ 
            children: [new TextRun({ text: 'NET AMOUNT TO CLIENT:', bold: true })]
          })] 
        }),
        new TableCell({ 
          children: [new Paragraph({ 
            children: [new TextRun({ text: formatCurrency(settlementData.netToEmployee), bold: true })]
          })] 
        })
      ]
    })
  );

  children.push(
    new Table({
      rows: tableRows,
      width: { size: 100, type: WidthType.PERCENTAGE }
    }),
    new Paragraph({
      children: [new TextRun({ text: 'This statement reflects the distribution of settlement funds as calculated.' })],
      spacing: { before: 400, after: 100 }
    }),
    new Paragraph({
      children: [new TextRun({ text: 'Please review carefully and contact your attorney with any questions.' })],
      spacing: { after: 100 }
    })
  );

  const doc = new Document({
    sections: [{ children }]
  });

  return await Packer.toBlob(doc);
}

/**
 * Get display name for benefit types
 */
function getBenefitDisplayName(type: string): string {
  switch (type) {
    case '34':
      return 'Section 34 (Temporary Total Disability)';
    case '35':
      return 'Section 35 (Temporary Partial Disability)';
    case '35ec':
      return 'Section 35 with Earning Capacity';
    case '34A':
      return 'Section 34A (Permanent & Total)';
    case '31':
      return 'Section 31 (Widow/Dependent)';
    default:
      return type;
  }
}